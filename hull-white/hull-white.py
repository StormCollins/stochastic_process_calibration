import numpy as np
from scipy.interpolate import interp1d


def theta(alpha: float, sigma: float):
    t = np.arange(0, 30.25, 0.25)

    # Don't know if this should be included...

    # Times to maturity for given swap curve
    swap_time_to_maturity = [0, 0.00273972602739726, 0.0821917808219178, 0.249315068493151, 0.495890410958904,
                             0.747945205479452, 1, 1.24931506849315, 1.4958904109589, 1.74794520547945, 2,
                             2.9972602739726, 4.0027397260274, 5.0027397260274, 6.0027397260274, 7.0027397260274,
                             8.0027397260274, 9, 10.0054794520548, 12.0082191780822, 15.0027397260274, 20.0082191780822,
                             25.013698630137, 30.0191780821918]
    # Corresponding swap discount factors
    swap_discount_factors = [1, 0.999907269575448, 0.997260675265517, 0.991717124230684, 0.983808917763081,
                             0.975717678662124, 0.967523680878883, 0.959082962515726, 0.950458527887378,
                             0.941229833843046, 0.93164890952382, 0.887225968658722, 0.834895492942358,
                             0.776717959564857, 0.713405382605866, 0.649354239063653, 0.585176994918833,
                             0.524323960782608, 0.469243755978326, 0.372526977084483, 0.268633004028575,
                             0.16274196335192, 0.104570874377476, 0.0717007182261533]

    # Interpolate swap curve at simulation dates
    interp_func = interp1d(swap_time_to_maturity, swap_discount_factors, kind='cubic')
    discount_factors = interp_func(t)

    discount_factors = np.array(
        [1, 0.9909, 0.9818, 0.9727, 0.9634, 0.9541, 0.9445, 0.9348, 0.9248, 0.9129, 0.8989, 0.8831, 0.8655, 0.8492,
         0.834, 0.82, 0.8071, 0.7931, 0.7779,
         0.7618, 0.7446, 0.728, 0.7118, 0.696, 0.6806, 0.6652, 0.6497, 0.6342, 0.6186, 0.6033, 0.5881, 0.5731, 0.5583,
         0.5439, 0.5298, 0.516, 0.5026,
         0.4894, 0.4764, 0.4636, 0.4511, 0.4389, 0.4269, 0.4152, 0.4038, 0.3927, 0.3818, 0.3712, 0.3608, 0.3508, 0.341,
         0.3315, 0.3222, 0.3133, 0.3046,
         0.2961, 0.2879, 0.2799, 0.2721, 0.2646, 0.2573, 0.2502, 0.2432, 0.2365, 0.23, 0.2236, 0.2175, 0.2115, 0.2056,
         0.2, 0.1945, 0.1891, 0.1839,
         0.1788, 0.1739, 0.1692, 0.1645, 0.16, 0.1556, 0.1513, 0.1472, 0.1432, 0.1393, 0.1355, 0.1318, 0.1282, 0.1248,
         0.1214, 0.1181, 0.115, 0.1119,
         0.1089, 0.106, 0.1032, 0.1005, 0.0978, 0.0952, 0.0927, 0.0903, 0.0879, 0.0856, 0.0834, 0.0812, 0.0792, 0.0772,
         0.0752, 0.0733, 0.0715, 0.0697,
         0.068, 0.0664, 0.0647, 0.0632, 0.0617, 0.0602, 0.0588, 0.0574, 0.0561, 0.0548, 0.0536, 0.0523])

    forward_rates = \
        1 / (t[1:] - t[0:-1]) * \
        np.log(discount_factors[0:-1] / discount_factors[1:])

    forward_rates = np.concatenate(([forward_rates[0]], forward_rates))  # Why do we do this?

    return (forward_rates[1:] - forward_rates[0:-1]) / (t[1:] - t[0:-1]) + \
           alpha * forward_rates[0:-1] + sigma ** 2 / (2 * alpha) * \
           (1 - np.exp(-2 * alpha * t[0:-1]))


# Hull-White calibration parameters from Josh's code
print(theta(0.05, 0.01))
